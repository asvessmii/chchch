import os
import logging
import asyncio
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, PhotoSize
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from pymongo import MongoClient
from datetime import datetime
import uuid
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017")
DB_NAME = os.getenv("DB_NAME", "test_database")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongo_client = MongoClient(MONGO_URL)
db = mongo_client[DB_NAME]
users_collection = db.users
test_results_collection = db.test_results

# –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL_USERNAME = "@anna_gertssss"
CHANNEL_URL = "https://t.me/anna_gertssss"

# ID –∞–¥–º–∏–Ω–∞
ADMIN_ID = 7470811680

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ —Å –±–∞–ª–ª–∞–º–∏
TEST_QUESTIONS = [
    {
        "question": "–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç",
        "options": [
            ("–¥–æ 30", 20),
            ("30‚Äì35", 30),
            ("36‚Äì40", 40),
            ("41‚Äì45", 50),
            ("46+", 60)
        ]
    },
    {
        "question": "–ö–∞–∫ —É —Ç–µ–±—è —Å –≥–æ—Ä–º–æ–Ω–∞–º–∏?",
        "options": [
            ("–í—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ", 20),
            ("–ü–ú–° —É—Å–∏–ª–∏–ª—Å—è, –æ—Ç—ë–∫–∏, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", 40),
            ("–ù–∞—á–∞–ª–∏—Å—å —Å–±–æ–∏, –ø—Ä—ã–≥–∞–µ—Ç —Ü–∏–∫–ª", 50),
            ("–£–∂–µ –º–µ–Ω–æ–ø–∞—É–∑–∞ / –±–ª–∏–∑–∫–æ", 60)
        ]
    },
    {
        "question": "–ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å –ø–∏—Ç–∞–µ—à—å—Å—è?",
        "options": [
            ("–ó–û–ñ, –Ω–æ –≤–µ—Å –Ω–µ —É—Ö–æ–¥–∏—Ç", 40),
            ("–ß–∞—Å—Ç–æ —Å—Ä—ã–≤—ã", 30),
            ("–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≥–æ–ª–æ–¥–Ω–∞—è", 50),
            ("–ï–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —Ç—è–∂–µ—Å—Ç—å", 50)
        ]
    },
    {
        "question": "–ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–∏—Ç?",
        "options": [
            ("–õ–∏—Ü–æ —Å—Ç–∞–ª–æ \"–ø—É—Ö–ª—ã–º\"", 40),
            ("–í–µ—Å –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ –∂–∏–≤–æ—Ç–µ", 50),
            ("–°–∏–ª –Ω–µ—Ç", 50),
            ("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–µ—Ä–µ–ø–∞–¥—ã –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏", 50),
            ("–ü–∞–¥–∞–µ—Ç –ª–∏–±–∏–¥–æ", 40),
            ("–í—Å—ë –≤–º–µ—Å—Ç–µ üò©", 60)
        ]
    },
    {
        "question": "–ü—Ä–æ–±–æ–≤–∞–ª–∞ –ª–∏ —Ç—ã –∫–µ—Ç–æ —Ä–∞–Ω—å—à–µ?",
        "options": [
            ("–î–∞, –Ω–æ –Ω–µ –∑–∞—à–ª–æ", 20),
            ("–ù–∏–∫–æ–≥–¥–∞", 30),
            ("–•–æ—á—É, –Ω–æ –±–æ—é—Å—å", 40),
            ("–ü—Ä–æ–±–æ–≤–∞–ª–∞ ‚Äî –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", 60)
        ]
    }
]

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
TEST_RESULTS = {
    (100, 130): {
        "percentage": 60,
        "title": "–ö–µ—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –æ—Ç–ª–∏—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
        "description": """–¢—ã –Ω–∞ —Ç–æ–º —ç—Ç–∞–ø–µ, –∫–æ–≥–¥–∞ —Ç–µ–ª–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ.
–ù–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å:
‚Äî –¥–æ–ª—å—à–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å
‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å "–∫–∞—á–µ–ª–∏" —Å –≤–µ—Å–æ–º –∏ —ç–Ω–µ—Ä–≥–∏–µ–π
‚Äî –ø–æ–º–æ—á—å –æ—Ä–≥–∞–Ω–∏–∑–º—É –ø–µ—Ä–µ–∂–∏—Ç—å –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞

–ö–µ—Ç–æ –≤ –º—è–≥–∫–æ–π —Ñ–æ—Ä–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–æ–π –∏ —Å–ø–æ—Å–æ–±–æ–º –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ –Ω–∞ –≥–ª—É–±–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ.

üì© –ó–∞–±–µ—Ä–∏ —Ä–∞—Ü–∏–æ–Ω –Ω–∞ 3 –¥–Ω—è ‚Äî –Ω–∞—á–Ω–∏ —Å –ª–µ–≥–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ç–µ–±–µ."""
    },
    (131, 170): {
        "percentage": 70,
        "title": "–¢–≤–æ—ë —Ç–µ–ª–æ –º–æ–∂–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–µ—Ç–æ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ",
        "description": """–ü–æ —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–∞–º –≤–∏–¥–Ω–æ: —Ç—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏—à—å –∑–∞ —Å–æ–±–æ–π –∏ —É–∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ —á—Ç–æ –Ω–µ—Ç.

–ù–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ:
‚Äî –ø—Ä–∏–≤—ã—á–Ω—ã–µ —Å—Ö–µ–º—ã –±–æ–ª—å—à–µ –Ω–µ –¥–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
‚Äî —Ç–µ–ª–æ "—Ç–æ—Ä–º–æ–∑–∏—Ç"
‚Äî —Ö–æ—á–µ—Ç—Å—è –±–æ–ª—å—à–µ –ª—ë–≥–∫–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏

–ö–µ—Ç–æ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–µ—Å—Ç—å –∂–∏—Ä". –≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è:
‚úÖ —É—á–∏—Ç —Ç–µ–ª–æ –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å–∞—Ö–∞—Ä–∞
‚úÖ –¥–∞—ë—Ç –ø–∏—Ç–∞–Ω–∏–µ –≥–æ—Ä–º–æ–Ω–∞–º
‚úÖ –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º

üì© –ó–∞–±–µ—Ä–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ 3 –¥–Ω—è –∏ –ø–æ–ø—Ä–æ–±—É–π –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –Ω–∞–¥ —Å–æ–±–æ–π."""
    },
    (171, 200): {
        "percentage": 80,
        "title": "–£ —Ç–µ–±—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —É–≥–ª–µ–≤–æ–¥–∞–º",
        "description": """–¢—ã —É–∂–µ –º–Ω–æ–≥–æ–µ –∑–Ω–∞–µ—à—å –æ —Å–µ–±–µ ‚Äî –∏, –ø–æ—Ö–æ–∂–µ, –ø—Ä–∏—à–ª–∞ –∫ –º–æ–º–µ–Ω—Ç—É, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –Ω–µ —á–µ—Ä–µ–∑ "–∂–µ—Å—Ç–∫–∞—á".

–ö–µ—Ç–æ –º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–æ–π—Ç–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ:
‚úÖ –æ–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É
‚úÖ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç —Ç—è–≥—É –∫ —Å–ª–∞–¥–∫–æ–º—É
‚úÖ –¥–∞—ë—Ç –æ—â—É—â–µ–Ω–∏–µ –Ω–∞—Å—ã—â–µ–Ω–∏—è –∏ —è—Å–Ω–æ—Å—Ç–∏

–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ: –Ω–µ —Å –±–µ–∫–æ–Ω–∞ –∏ –º–∞—Å–ª–∞, –∞ —Å –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–≥–æ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.

üì© –ü–æ–ª—É—á–∏ —Ä–∞—Ü–∏–æ–Ω –Ω–∞ 3 –¥–Ω—è ‚Äî —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –ø–µ—Ä–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã —É–∂–µ –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞."""
    },
    (201, 230): {
        "percentage": 90,
        "title": "–ö–µ—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞",
        "description": """–¢—ã —Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤–∞ –∫ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–º—É —É—Ä–æ–≤–Ω—é –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ.

–ö–µ—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∂–µ–Ω—â–∏–Ω–∞–º:
‚úÖ —É–ª—É—á—à–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∫–æ–∂–∏ –∏ –≤–æ–ª–æ—Å
‚úÖ –º—è–≥–∫–æ —É–±–∏—Ä–∞—Ç—å "–∑–∞—Å—Ç–æ–∏" –≤ —Ç–µ–ª–µ
‚úÖ –ø–∏—Ç–∞—Ç—å –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∂–∏—Ä–∞–º–∏, –∞ –Ω–µ —É–≥–ª–µ–≤–æ–¥–∞–º–∏

–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∞ "–µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ", —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏, —É–±–∏—Ä–∞—Ç—å —Å–ª–∞–¥–∫–æ–µ.
–ù–æ –∫–µ—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∑–∞ —Å—á—ë—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –∞ –∑–∞ —Å—á—ë—Ç –≥—Ä–∞–º–æ—Ç–Ω–æ–π –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ø–ª–∏–≤–∞.

üì© –ü–æ–ª—É—á–∏ –∫–µ—Ç–æ—Ä–∞—Ü–∏–æ–Ω –Ω–∞ 3 –¥–Ω—è ‚Äî —ç—Ç–æ –≤–∫—É—Å–Ω–æ, –ª–µ–≥–∫–æ –∏ –¥–∞—Å—Ç —Ç–µ–±–µ —Å—Ä–∞–∑—É –æ—â—É—â–µ–Ω–∏–µ "—è —Å–Ω–æ–≤–∞ –≤ —Ä–µ—Å—É—Ä—Å–µ"."""
    },
    (231, 500): {
        "percentage": 100,
        "title": "–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∂–µ–Ω—Å–∫–∏–º –∫–µ—Ç–æ",
        "description": """–í—Å—ë, —á—Ç–æ —Ç—ã –ø—Ä–æ—à–ª–∞, –¥–∞—ë—Ç —Ç–µ–±–µ –æ–ø—ã—Ç.
–ê –∫–µ—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ç–≤–æ–µ–π –Ω–æ–≤–æ–π —Ç–æ—á–∫–æ–π –æ–ø–æ—Ä—ã ‚Äî –Ω–µ –¥–∏–µ—Ç–æ–π, –∞ —Å—Ç–∏–ª–µ–º –∂–∏–∑–Ω–∏, –≥–¥–µ:
‚úÖ —Ç–µ–ª–æ —Å–∂–∏–≥–∞–µ—Ç –∂–∏—Ä —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
‚úÖ –≥–æ—Ä–º–æ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –±–∞–ª–∞–Ω—Å–µ
‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —ç–Ω–µ—Ä–≥–∏—è –∏ –ª–∏–±–∏–¥–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è

–¢–≤–æ—è —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º ‚Äî –≤–∞–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–∞—Ç—å –µ–π –ø–æ–¥–¥–µ—Ä–∂–∫—É, –∞ –Ω–µ —Å—Ç—Ä–µ—Å—Å.

üì© –ü–æ–ª—É—á–∏ 3-–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—É—Ç—å –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –±–µ—Ä–µ–∂–Ω–æ –∫ —Å–µ–±–µ."""
    }
}


class TelegramBot:
    def __init__(self):
        self.application = None
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_data = {
            "user_id": str(user_id),
            "username": username,
            "first_name": update.effective_user.first_name,
            "last_name": update.effective_user.last_name,
            "created_at": datetime.utcnow(),
            "test_completed": False
        }
        
        users_collection.update_one(
            {"user_id": str(user_id)},
            {"$set": user_data},
            upsert=True
        )
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = """–ü—Ä–∏–≤–µ—Ç! 
–¢—ã –ø–æ–ø–∞–ª–∞ –≤ –º–æ–π –±–æ—Ç

–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞ –ì–µ—Ä—Ü
–Ø - –Ω–∞—Ç—É—Ä–æ–ø–∞—Ç , –ø–æ–º–æ–≥–∞—é —Ç—ã—Å—è—á–∞–º –∂–µ–Ω—â–∏–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∑–¥–æ—Ä–æ–≤—ã–º–∏ –∏ —Å—Ç—Ä–æ–π–Ω—ã–º–∏ –∏ –≤–ª—é–±–ª—è—Ç—å—Å—è –≤ —Å–≤–æ–µ —Ç–µ–ª–æ –≤–Ω–æ–≤—å , –∏ –≤–Ω–æ–≤—å. 

–í —ç—Ç–æ–º –±–æ—Ç–µ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –≥–∞–π–¥–æ–≤ –∏ —É—Ä–æ–∫–æ–≤ üòç 
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚ú®"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –ê–Ω–Ω—ã –ì–µ—Ä—Ü
        photo_path = "/root/app/telegram_bot_images/anna_photo.jpg"
        
        try:
            with open(photo_path, 'rb') as photo_file:
                await update.message.reply_photo(
                    photo=photo_file,
                    caption=welcome_text
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await update.message.reply_text(welcome_text)
        
        # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(5)
        await self.send_subscription_check(update, context)
        
    async def send_subscription_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        subscription_text = """–î–ª—è –Ω–∞—á–∞–ª–∞  —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —è –¥–µ–ª—é—Å—å –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∏—Å—Ç–æ—Ç–µ –ø–∏—Ç–∞–Ω–∏—è, —Ç–µ–ª–∞ –∏ —Å–æ–∑–Ω–∞–Ω–∏—è. –ü–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å –±–µ–∑ –ø–µ—Ä–µ–∫–æ—Å–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω–æ—Å—Ç–∏ –∏ –≤—ã–ª–∏–∑–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ !

–ì–¥–µ –∏ —Ç—ã, –∏ —è –∏–º–µ–µ–º –ø—Ä–∞–≤–æ –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –ø–∏—Ç–∞–Ω–∏–∏, –≤ —Å–ø–æ—Ä—Ç–µ, –≤ –º—ã—Å–ª—è—Ö, –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö - –Ω–æ –≤ —ç—Ç–æ–π –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –µ—Å—Ç—å –∂–∏–∑–Ω—åüëç

–ê —Ç–∞–∫–∂–µ —Ç—ã –Ω–∞–π–¥–µ—à—å —Ç–∞–º –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ –ø–æ–¥–∫–∞—Å—Ç—ã –ø—Ä–æ –ø–∏—Ç–∞–Ω–∏–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ  ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–Ω–∞–µ—Ç –≥—É–≥–ª, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–π –æ–ø—ã—Ç –∏ –æ–ø—ã—Ç 1000 –∂–µ–Ω—â–∏–Ω, –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—É—Ç—å –æ—á–∏—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π . 

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"""
        
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(subscription_text, reply_markup=reply_markup)
        
    async def check_subscription(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.first_name
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
            member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if member.status in ['member', 'administrator', 'creator']:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
                await query.edit_message_text("–í–∏–∂—É –ø–æ–¥–ø–∏—Å–∫—É üíó")
                await self.send_test_invitation(query, context)
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
                await query.edit_message_text(
                    "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ü§î\n\n"
                    "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑ ‚¨áÔ∏è",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscription")]
                    ])
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}): {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞) - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏)")
            await query.edit_message_text(
                "–ù–µ —É–≤–∏–¥–µ–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª ü§î\n\n"
                "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ ‚¨áÔ∏è",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
                    [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscription")]
                ])
            )
            
    async def send_test_invitation(self, query_or_update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç—É"""
        test_invitation = """–ï—Å–ª–∏ —Ç–µ–±–µ 30+, –∞ –≤–µ—Å —Å—Ç–æ–∏—Ç, —Ü–∏–∫–ª —Å–∫–∞—á–µ—Ç, –æ—Ç–µ–∫–∏, –ª–∏—Ü–æ "–ø–ª—ã–≤—ë—Ç".

–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º 
–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –±–µ–ª–∫–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –ø–æ–ª–µ–∑–Ω—ã—Ö –∂–∏—Ä–æ–≤ , –∑–∞—Å—Ç–æ–µ–º –ª–∏–º—Ñ—ã, –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–ø—Ä–æ—Ö–æ–¥—è—â–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–æ—Ä—Ç–∏–∑–æ–ª–∞, –Ω–µ–≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º—É —Ç–µ–ª—É, –∏  –ø—Ä.

–Ø —Å–¥–µ–ª–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç (5 –≤–æ–ø—Ä–æ—Å–æ–≤) —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å:
üåü–∫–∞–∫ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–≤–æ–∏ –≥–æ—Ä–º–æ–Ω—ã
üåü–ø–æ–¥–æ–π–¥—ë—Ç –ª–∏ —Ç–µ–±–µ –∫–µ—Ç–æ
üåü–∏ —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å –≤—ã—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ üëç

–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ , —è –≤—ã–¥–∞–º —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–∞—Ü–∏–æ–Ω , –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é"""
        
        keyboard = [[InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ‚Üí", callback_data="start_test")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(query_or_update, 'message'):
            # –≠—Ç–æ callback query
            await query_or_update.message.reply_text(test_invitation, reply_markup=reply_markup)
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ update
            await query_or_update.message.reply_text(test_invitation, reply_markup=reply_markup)
            
    async def start_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            "test_active": True,
            "current_question": 0,
            "answers": [],
            "total_score": 0
        }
        
        await self.send_question(query, context, 0)
        
    async def send_question(self, query, context: ContextTypes.DEFAULT_TYPE, question_index: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞"""
        if question_index >= len(TEST_QUESTIONS):
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            await self.finish_test(query, context)
            return
            
        question_data = TEST_QUESTIONS[question_index]
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞
        if question_index == 0:
            header = "–û—Ç–≤–µ—Ç—å –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏ —è –ø—Ä–∏—à–ª—é —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç + –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Ü–∏–æ–Ω –Ω–∞ 3 –¥–Ω—è\n\n"
        else:
            header = ""
            
        question_text = f"{header}–í–æ–ø—Ä–æ—Å {question_index + 1}: {question_data['question']}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        for i, (option_text, score) in enumerate(question_data['options']):
            callback_data = f"answer_{question_index}_{i}"
            keyboard.append([InlineKeyboardButton(option_text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(question_text, reply_markup=reply_markup)
        
    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        
        if user_id not in self.user_states or not self.user_states[user_id].get("test_active"):
            await query.edit_message_text("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
            
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        callback_data = query.data
        parts = callback_data.split('_')
        question_index = int(parts[1])
        answer_index = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–ª—ã –∑–∞ –æ—Ç–≤–µ—Ç
        question_data = TEST_QUESTIONS[question_index]
        option_text, score = question_data['options'][answer_index]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        user_state = self.user_states[user_id]
        user_state['answers'].append({
            'question_index': question_index,
            'answer_index': answer_index,
            'answer_text': option_text,
            'score': score
        })
        user_state['total_score'] += score
        user_state['current_question'] = question_index + 1
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        await self.send_question(query, context, question_index + 1)
        
    async def finish_test(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        user_id = str(query.from_user.id)
        user_state = self.user_states[user_id]
        total_score = user_state['total_score']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = None
        for score_range, result_data in TEST_RESULTS.items():
            if score_range[0] <= total_score <= score_range[1]:
                result = result_data
                break
                
        if not result:
            result = TEST_RESULTS[(231, 500)]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        test_result = {
            "user_id": user_id,
            "test_id": str(uuid.uuid4()),
            "answers": user_state['answers'],
            "total_score": total_score,
            "result_percentage": result['percentage'],
            "result_title": result['title'],
            "completed_at": datetime.utcnow()
        }
        
        test_results_collection.insert_one(test_result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"test_completed": True, "last_test_score": total_score}}
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_text = f"{result['percentage']}% ‚Äî {result['title']}\n\n{result['description']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Ü–∏–æ–Ω–∞
        keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω", callback_data="get_diet")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(result_text, reply_markup=reply_markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ send_diet
        self.user_states[user_id] = {
            "total_score": total_score,
            "result": result
        }
            
    async def send_diet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ä–∞—Ü–∏–æ–Ω–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        user_state = self.user_states.get(user_id, {})
        total_score = user_state.get('total_score', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        result = None
        for score_range, result_data in TEST_RESULTS.items():
            if score_range[0] <= total_score <= score_range[1]:
                result = result_data
                break
                
        if not result:
            result = TEST_RESULTS[(231, 500)]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ë–ï–ó –∫–Ω–æ–ø–∫–∏
        result_text = f"{result['percentage']}% ‚Äî {result['title']}\n\n{result['description']}"
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        await query.edit_message_text(result_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª
        pdf_path = "/root/app/telegram_bot_pdfs/–ö–µ—Ç–æ –ê–Ω–Ω–∞ –ì–µ—Ä—Ü.pdf"
        
        try:
            with open(pdf_path, 'rb') as pdf_file:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=pdf_file,
                    filename="–ö–µ—Ç–æ-–ù–∞—á–∞–ª–æ_—Ä–∞—Ü–∏–æ–Ω.pdf",
                    caption="–ö–µ—Ç–æ-–ù–∞—á–∞–ª–æ: –ª—ë–≥–∫–∏–π –≤—Ö–æ–¥ –≤ –º–∏—Ä –Ω–∏–∑–∫–∏—Ö —É–≥–ª–µ–≤–æ–¥–æ–≤"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
            await query.message.reply_text("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            
    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        
        if query.data == "check_subscription":
            await self.check_subscription(update, context)
        elif query.data == "start_test":
            await self.start_test(update, context)
        elif query.data.startswith("answer_"):
            await self.handle_answer(update, context)
        elif query.data == "get_diet":
            await self.send_diet(update, context)
            
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.callback_query_handler))
        
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(drop_pending_updates=True)
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            import asyncio
            while True:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            raise e


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramBot()
    asyncio.run(bot.run())


if __name__ == "__main__":
    main()
